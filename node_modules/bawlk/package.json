{
  "name": "bawlk",
  "version": "0.0.1",
  "description": "Collection of utilities for bulk loading tabular data into relational databases.",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tesera/bawlk.git"
  },
  "author": {
    "name": "Yves Richard"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tesera/awk-bawlk/issues"
  },
  "dependencies": {
    "lodash": "~3.2.0",
    "fast-csv": "~0.5.5"
  },
  "readme": "# bawlk\n\nA simple tool to validate csv data. Uses awk under the hood but you don't need to know awk to use it. There are tools available to create a ruleset from existing data and another tool to create an awk validator from those ruleset.\n\nawk is a very natural fit for validating csv data. Even though awk is a very complex language its quite simple in nature. With awk you get a free iterator, pattern matchin and rich expression language. awk is built-in most unix/linux systems and can be installed on windows based systems. gawk is a newer version of awk which extends the language further with more feature. Other variations like mawk take it a step further and optimizes awk for performance.\n\n## Usage\nbawlk are a set of tools to automate building an awk validation script. Once the script is built it is self contained and can be used independently. \n\nA typical workflow looks like this:\n\n1. Create a ruleset from existing data. \n2. Edit the ruleset to add additional field or file constraints.\n3. Generate your validator by passing in your ruleset to the bawlk.awk script.\n4. Validate your data\n\n#### 1. Create a ruleset from existing data.\n\n````\n$ ./bawlkinit.sh ./examples/pgyi/data/*.csv\nfield,required,CompanyPlotNumber\nfield,required,MeasurementNumber\nfield,required,TreeNumber\nfield,required,TreeType\nfield,required,DBH\nfield,required,DBHHeight\nfield,required,RCD\nfield,required,RCDHeight\nfield,required,Height\nfield,required,CrownClass\nfield,required,DBHage\nfield,required,Stumpage\nfield,required,StumpHeight\nfield,required,TotalAge\nfield,required,HTLC\nfield,required,CrownDiameterNS\nfield,required,CrownDiameterEW\nfield,required,ConditionCode1\nfield,required,Cause1\nfield,required,Severity1\nfield,required,ConditionCode2\nfield,required,Cause2\nfield,required,Severity2\nfield,required,ConditionCode3\nfield,required,Cause3\nfield,required,Severity3\nfield,required,TreesComment\n```` \n\n#### 2. Edit the ruleset to add additional field or file constraints.\n\n````\n# fields are:\nrule_type,rule_name,rule_params\n\n# controls how error are handled (default=text)\n# prints only errors inlcuding a desc and the resord itself\noption,mode,text\n# prints all records and wraps bad value in >>value<<\noption,mode,wrap\n# prints all records and appends the error to the record as a field\noption,mode,append\n\n# enable/disable printing a summary\noption,summary,true\n\n# set what the default violation catagory is. (default=na)\noption,dcat,warning\n\n# check to make sure headers match\nheaders,names,CompanyPlotNumber|MeasurementNumber|TreeNumber|TreeType|DBH|DBHHeight|RCD|RCDHeight|Height|CrownClass|DBHage|Stumpage|StumpHeight|TotalAge|HTLC|CrownDiameterNS|CrownDiameterEW|ConditionCode1|Cause1|Severity1|ConditionCode2|Cause2|Severity2|ConditionCode3|Cause3|Severity3|TreesComment\n\n# check to make sure values are numeric\nfield,type,CompanyPlotNumber numeric\n\n# check to make sure values are not null\nfield,required,CompanyPlotNumber\n\n# check to make sure values are unique\nfield,unique,CompanyPlotNumber\n\n# check to make sure values min/max\nfield,min,TreeNumber 1\nfield,max,TreeNumber 999999\n\n# check to make sure values are within accepted values\nfield,values,TreeType T|S|PS|PO|R1|R2|R3|R4|B\n\n# check to make sure values match a certain pattern\n# not-implemented: field,pattern,TreeType /^(?:T|S|PS|PO|R1|R2|R3|R4|B)$/\n\n# check composite/compound keys\n# not-implemented: file,unique,CompanyPlotNumber MeasurementNumber\n\n# set default values if value not  set\n# not-implemented: field,default,Elevation -9999\n# not-implemented: field,default,FMU NA\n````\n\n#### 3. Generate your validator by passing in your ruleset to the bawlk.awk script.\n\n````\n$ ./bawlk.awk < TreesMeasurement.rules.csv > TreesMeasurement.validator.awk\n````\n\n#### 4. Validate your data\n\n````\n$ TreesMeasurement.validator.awk < TreesMeasurement.csv > TreesMeasurement.violations.txt\n````\n\n## Advanced Usage\n\nYour validator can either be used as is or be further customized if you feel comfortable with the awk language. \n\n## Roadmap\n* add ability to pass in options from the ruleset i.e. error handling/messages/...\n* add ability to validate csv dialect\n* add ablity to pass in custom ``awk /patern/ { expression }``\n* add ability to import/include third party libs\n* add ability to validate floating point precision",
  "readmeFilename": "README.md",
  "_id": "bawlk@0.0.1",
  "dist": {
    "shasum": "b628fdc1435aaab645e4585b651d0b8a952250bc"
  },
  "_resolved": "git://github.com/tesera/bawlk#6f4bccea08b402210cc94dfb8f885d2f8fff030b",
  "_from": "git://github.com/tesera/bawlk",
  "_fromGithub": true
}
